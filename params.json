{"name":"ByContext","tagline":"","body":"## what is byContext?\r\n     byContext is a data container, that provides the application with \r\n\t data, filtered according to the application's runtime context \r\n\t (deployment environment e.g dev\\production, specific machine etc..) \r\n\t while completely abstracting the filtering logic from application \r\n\t code, all the application has to do is notify byContext about the \r\n\t application's runtime context.\r\n \r\n## why is byContext useful?\r\n     have you ever wanted to configure a different log level depending\r\n\t of the deployment context \t (dev\\staging\\production) of the application? \r\n     how about different timeout setting per service?\r\n\t byConext provides you with this functionality in the simplest way.\r\n     byConext is extensible and can easily be integrated with a DI \r\n\t container to provide different service implementations according \r\n\t to the application's runtime context e.g using a stub access \r\n\t control service at development time.\r\n     when your product needs to be highly configurable and you \r\n\t don't want to write ad-hoc code to manage the variation of \r\n\t configuration data, byContext can save you.\r\n\t \r\n## License\r\n\tByContext is licensed under Apache 2.0\r\n\r\n### simplest possible thing\r\n\r\n```\r\nstring data =\r\n@\"<Configuration>\" +\r\n\"<Section TypeName='SimplestPossibleThing.ExampleModel,SimplestPossibleThing'>\"+\r\n  \"<Parameter Name='LogsPath'>\" +\r\n\t\"<Values>\" +\r\n\t\t\"<Value Value='./logs'>\" +\r\n\t\t\t\"<TextMatch Subject='environment' Value='development'/>\" +\r\n\t\t\"</Value>\" +\r\n\t\t\"<Value Value='d:/somefolder/logs'>\" +\r\n\t\t\t\"<TextMatch Subject='environment' Value='production'/>\" +\r\n\t\t\"</Value>\" +\r\n\t\"</Values>\" +\r\n  \"</Parameter>\" +\r\n\"</Section>\" +\r\n\"</Configuration>\";\r\n\r\n// create byContext instance, loaded with the above xml and \r\n// with runtime context initialized to environment = production\r\nvar byContext = Configure.With(\r\n\tcfg => \r\n\t\tcfg.AddFromRawXml(data)\r\n\t\t.RuntimeContext(\r\n\t\tctx => \r\n\t\t\tctx.Add(\"environment\", \"production\")));\r\n\r\n// get 'ExampleModel' instance with its  properties initialized \r\n// with the value most relevant to the app's runtime context\r\nvar model = byContext.GetSection<ExampleModel>();\r\n\r\n// print 'd:/somefolder/logs'\r\nConsole.WriteLine(model.LogsPath);\r\n```\r\n","google":"UA-41590119-1","note":"Don't delete this file! It's used internally to help with page regeneration."}